// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/play.proto

package play

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlayService_GetPlayById_FullMethodName = "/PlayService/GetPlayById"
	PlayService_GetAllPlays_FullMethodName = "/PlayService/GetAllPlays"
	PlayService_CreatePlay_FullMethodName  = "/PlayService/CreatePlay"
)

// PlayServiceClient is the client API for PlayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayServiceClient interface {
	GetPlayById(ctx context.Context, in *GetPlayByIdRequest, opts ...grpc.CallOption) (*GetPlayByIdResponse, error)
	GetAllPlays(ctx context.Context, in *GetAllPlaysRequest, opts ...grpc.CallOption) (*GetAllPlaysResponse, error)
	CreatePlay(ctx context.Context, in *CreatePlayRequest, opts ...grpc.CallOption) (*CreatePlayResponse, error)
}

type playServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayServiceClient(cc grpc.ClientConnInterface) PlayServiceClient {
	return &playServiceClient{cc}
}

func (c *playServiceClient) GetPlayById(ctx context.Context, in *GetPlayByIdRequest, opts ...grpc.CallOption) (*GetPlayByIdResponse, error) {
	out := new(GetPlayByIdResponse)
	err := c.cc.Invoke(ctx, PlayService_GetPlayById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playServiceClient) GetAllPlays(ctx context.Context, in *GetAllPlaysRequest, opts ...grpc.CallOption) (*GetAllPlaysResponse, error) {
	out := new(GetAllPlaysResponse)
	err := c.cc.Invoke(ctx, PlayService_GetAllPlays_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playServiceClient) CreatePlay(ctx context.Context, in *CreatePlayRequest, opts ...grpc.CallOption) (*CreatePlayResponse, error) {
	out := new(CreatePlayResponse)
	err := c.cc.Invoke(ctx, PlayService_CreatePlay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayServiceServer is the server API for PlayService service.
// All implementations must embed UnimplementedPlayServiceServer
// for forward compatibility
type PlayServiceServer interface {
	GetPlayById(context.Context, *GetPlayByIdRequest) (*GetPlayByIdResponse, error)
	GetAllPlays(context.Context, *GetAllPlaysRequest) (*GetAllPlaysResponse, error)
	CreatePlay(context.Context, *CreatePlayRequest) (*CreatePlayResponse, error)
	mustEmbedUnimplementedPlayServiceServer()
}

// UnimplementedPlayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlayServiceServer struct {
}

func (UnimplementedPlayServiceServer) GetPlayById(context.Context, *GetPlayByIdRequest) (*GetPlayByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayById not implemented")
}
func (UnimplementedPlayServiceServer) GetAllPlays(context.Context, *GetAllPlaysRequest) (*GetAllPlaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPlays not implemented")
}
func (UnimplementedPlayServiceServer) CreatePlay(context.Context, *CreatePlayRequest) (*CreatePlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlay not implemented")
}
func (UnimplementedPlayServiceServer) mustEmbedUnimplementedPlayServiceServer() {}

// UnsafePlayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayServiceServer will
// result in compilation errors.
type UnsafePlayServiceServer interface {
	mustEmbedUnimplementedPlayServiceServer()
}

func RegisterPlayServiceServer(s grpc.ServiceRegistrar, srv PlayServiceServer) {
	s.RegisterService(&PlayService_ServiceDesc, srv)
}

func _PlayService_GetPlayById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServiceServer).GetPlayById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayService_GetPlayById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServiceServer).GetPlayById(ctx, req.(*GetPlayByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayService_GetAllPlays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPlaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServiceServer).GetAllPlays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayService_GetAllPlays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServiceServer).GetAllPlays(ctx, req.(*GetAllPlaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayService_CreatePlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServiceServer).CreatePlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayService_CreatePlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServiceServer).CreatePlay(ctx, req.(*CreatePlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayService_ServiceDesc is the grpc.ServiceDesc for PlayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PlayService",
	HandlerType: (*PlayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayById",
			Handler:    _PlayService_GetPlayById_Handler,
		},
		{
			MethodName: "GetAllPlays",
			Handler:    _PlayService_GetAllPlays_Handler,
		},
		{
			MethodName: "CreatePlay",
			Handler:    _PlayService_CreatePlay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/play.proto",
}
